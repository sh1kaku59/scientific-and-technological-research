import tkinter as tk
from tkinter import ttk, messagebox
import threading
import time
from transcript_result_window import TranscriptResultWindow
from supabase import create_client
import json

# Supabase config
SUPABASE_URL = "https://vvhrhsctmmrmzjztfzcg.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ2aHJoc2N0bW1ybXpqenRmemNnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUxMTE4NzQsImV4cCI6MjA3MDY4Nzg3NH0.TAyoqYZBwAM7qjDG2zqIkAbvq4gqTMe1sm2sbAk2CpY"

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

def test_with_real_data():
    """Test TranscriptResultWindow v·ªõi d·ªØ li·ªáu th·ª±c t·ª´ Supabase"""
    
    print("üöÄ ƒêang test TranscriptResultWindow v·ªõi d·ªØ li·ªáu th·ª±c t·ª´ Supabase...")
    print("="*70)
    
    # L·∫•y d·ªØ li·ªáu th·ª±c t·ª´ Supabase
    try:
        print("üìä ƒêang l·∫•y d·ªØ li·ªáu sessions t·ª´ Supabase...")
        result = supabase.table("transcripts").select("*").execute()
        
        if not result.data:
            print("‚ùå Kh√¥ng c√≥ transcript n√†o trong database!")
            messagebox.showerror("L·ªói", "Kh√¥ng c√≥ d·ªØ li·ªáu transcript trong Supabase!")
            return
        
        print(f"‚úÖ T√¨m th·∫•y {len(result.data)} transcripts:")
        
        # Hi·ªÉn th·ªã t·∫•t c·∫£ sessions c√≥ s·∫µn
        available_sessions = []
        for i, transcript in enumerate(result.data):
            session_id = transcript.get('session_id')
            session_folder = session_id.split("_config_audio_")[0] if "_config_audio_" in session_id else session_id
            created_at = transcript.get('created_at')
            total_segments = transcript.get('total_segments', 0)
            
            # Ki·ªÉm tra s·ªë segments th·ª±c t·∫ø
            segments_result = supabase.table("transcript_segments").select("*").eq("session_id", session_id).execute()
            actual_segments = len(segments_result.data)
            
            # N·∫øu kh√¥ng t√¨m th·∫•y v·ªõi session_id ch√≠nh x√°c, th·ª≠ pattern
            if actual_segments == 0:
                segments_result = supabase.table("transcript_segments").select("*").ilike("session_id", f"{session_folder}%").execute()
                actual_segments = len(segments_result.data)
            
            available_sessions.append({
                'index': i + 1,
                'session_folder': session_folder,
                'session_id': session_id,
                'created_at': created_at,
                'total_segments': total_segments,
                'actual_segments': actual_segments
            })
            
            print(f"   [{i+1}] {session_folder}")
            print(f"       ID: {session_id}")
            print(f"       Created: {created_at}")
            print(f"       Segments: {actual_segments}/{total_segments}")
            print()
        
        # T·∫°o root window ·∫©n
        root = tk.Tk()
        root.withdraw()
        
        # N·∫øu ch·ªâ c√≥ 1 session, s·ª≠ d·ª•ng lu√¥n
        if len(available_sessions) == 1:
            selected_session = available_sessions[0]
            print(f"üéØ S·ª≠ d·ª•ng session duy nh·∫•t: {selected_session['session_folder']}")
        else:
            # Ch·ªçn session trong terminal
            print("üìã Ch·ªçn session ƒë·ªÉ test:")
            while True:
                try:
                    choice = input("Nh·∫≠p s·ªë session (1 ho·∫∑c 2): ").strip()
                    if choice in ['1', '2']:
                        index = int(choice) - 1
                        if 0 <= index < len(available_sessions):
                            selected_session = available_sessions[index]
                            print(f"üéØ ƒê√£ ch·ªçn session: {selected_session['session_folder']}")
                            break
                    print("‚ùå Vui l√≤ng nh·∫≠p 1 ho·∫∑c 2")
                except KeyboardInterrupt:
                    print("\n‚ùå ƒê√£ h·ªßy")
                    return
                except:
                    print("‚ùå L·ªói input, th·ª≠ l·∫°i")
        
        print(f"üöÄ ƒêang kh·ªüi t·∫°o TranscriptResultWindow cho session: {selected_session['session_folder']}")
        print(f"   Session ID: {selected_session['session_id']}")
        print(f"   Segments: {selected_session['actual_segments']}")
        print()
        
        # T·∫°o TranscriptResultWindow v·ªõi d·ªØ li·ªáu th·ª±c
        transcript_window = TranscriptResultWindow(
            master=root,
            session_folder=selected_session['session_folder'],
            config_filename=f"{selected_session['session_folder']}_config.json"
        )
        
        print("‚úÖ TranscriptResultWindow ƒë√£ ƒë∆∞·ª£c t·∫°o!")
        print()
        print("üéÆ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:")
        print("   ‚Ä¢ Ch·ªù window load d·ªØ li·ªáu t·ª´ Supabase")
        print("   ‚Ä¢ Click ch·ªçn m·ªôt segment trong danh s√°ch")
        print("   ‚Ä¢ Double-click segment ho·∫∑c click n√∫t 'Ph√°t' ƒë·ªÉ nghe audio")
        print("   ‚Ä¢ Click 'D·ª´ng' ƒë·ªÉ d·ª´ng ph√°t audio")
        print("   ‚Ä¢ S·ª≠ d·ª•ng n√∫t 'Xu·∫•t TXT' ho·∫∑c 'Xu·∫•t JSON' ƒë·ªÉ export")
        print("   ‚Ä¢ Click 'L√†m m·ªõi' ƒë·ªÉ reload d·ªØ li·ªáu")
        print()
        
        # Hi·ªÉn th·ªã root window
        root.deiconify()
        root.title("üß™ Test TranscriptResultWindow")
        root.geometry("400x200")
        
        # Th√™m instructions v√†o root window
        instruction_frame = tk.Frame(root, bg="#f0f0f0")
        instruction_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        title_label = tk.Label(instruction_frame, 
                              text="üß™ TranscriptResultWindow Test",
                              font=("Segoe UI", 14, "bold"),
                              bg="#f0f0f0")
        title_label.pack(pady=(0, 10))
        
        info_label = tk.Label(instruction_frame, 
                             text=f"Session: {selected_session['session_folder'][:50]}...\n"
                                  f"Segments: {selected_session['actual_segments']}\n"
                                  f"Status: ƒêang load d·ªØ li·ªáu...",
                             font=("Segoe UI", 10),
                             bg="#f0f0f0", justify="left")
        info_label.pack(pady=10)
        
        def check_loading_status():
            """Ki·ªÉm tra tr·∫°ng th√°i loading"""
            def update_status():
                try:
                    if hasattr(transcript_window, 'transcript_data') and transcript_window.transcript_data:
                        # Ki·ªÉm tra UI ƒë√£ load segments ch∆∞a
                        if hasattr(transcript_window, 'tree'):
                            segments_count = len(transcript_window.tree.get_children())
                            if segments_count > 0:
                                info_label.config(
                                    text=f"Session: {selected_session['session_folder'][:50]}...\n"
                                         f"Segments: {segments_count} loaded\n"
                                         f"Status: ‚úÖ S·∫µn s√†ng! H√£y test c√°c ch·ª©c nƒÉng"
                                )
                                return
                    
                    # N·∫øu ch∆∞a load xong, ti·∫øp t·ª•c check
                    root.after(1000, update_status)
                    
                except Exception:
                    # Window c√≥ th·ªÉ ƒë√£ b·ªã ƒë√≥ng
                    pass
            
            root.after(2000, update_status)  # Check sau 2 gi√¢y
        
        check_loading_status()
        
        def close_all():
            """ƒê√≥ng t·∫•t c·∫£ windows"""
            try:
                transcript_window.destroy()
            except:
                pass
            root.destroy()
        
        close_button = tk.Button(instruction_frame, 
                                text="‚ùå ƒê√≥ng t·∫•t c·∫£",
                                command=close_all,
                                bg="#f44336", fg="white",
                                font=("Segoe UI", 10))
        close_button.pack(pady=10)
        
        root.protocol("WM_DELETE_WINDOW", close_all)
        
        # Start event loop
        print("üñ•Ô∏è B·∫Øt ƒë·∫ßu GUI event loop...")
        root.mainloop()
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()
        messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra: {e}")

def show_session_selection_dialog(parent, sessions):
    """Hi·ªÉn th·ªã dialog ƒë·ªÉ ch·ªçn session"""
    
    dialog = tk.Toplevel(parent)
    dialog.title("Ch·ªçn Session ƒë·ªÉ Test")
    dialog.geometry("700x400")
    dialog.transient(parent)
    dialog.grab_set()
    
    # ƒê∆∞a dialog l√™n tr√™n c√πng
    dialog.lift()
    dialog.focus_force()
    dialog.attributes('-topmost', True)
    dialog.after(100, lambda: dialog.attributes('-topmost', False))
    
    # Center the dialog
    dialog.update_idletasks()
    x = (dialog.winfo_screenwidth() - 700) // 2
    y = (dialog.winfo_screenheight() - 400) // 2
    dialog.geometry(f"700x400+{x}+{y}")
    
    selected_session = None
    
    # Title
    title_label = tk.Label(dialog, 
                          text="üìã Ch·ªçn Session ƒë·ªÉ Test",
                          font=("Segoe UI", 14, "bold"))
    title_label.pack(pady=10)
    
    # Sessions listbox
    listbox_frame = tk.Frame(dialog)
    listbox_frame.pack(fill="both", expand=True, padx=20, pady=10)
    
    listbox = tk.Listbox(listbox_frame, font=("Consolas", 9))
    scrollbar = ttk.Scrollbar(listbox_frame, orient="vertical", command=listbox.yview)
    listbox.configure(yscrollcommand=scrollbar.set)
    
    # Populate listbox
    for session in sessions:
        display_text = (f"[{session['index']}] {session['session_folder'][:60]}... "
                       f"({session['actual_segments']}/{session['total_segments']} segments)")
        listbox.insert("end", display_text)
    
    listbox.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")
    
    # Info label
    info_label = tk.Label(dialog, 
                         text="üí° Ch·ªçn session:\n‚Ä¢ Click v√†o session r·ªìi nh·∫•n OK\n‚Ä¢ Double-click ƒë·ªÉ ch·ªçn nhanh\n‚Ä¢ Nh·∫•n ph√≠m s·ªë 1,2,3... r·ªìi Enter",
                         font=("Segoe UI", 9), justify="center")
    info_label.pack(pady=5)
    
    def on_key_press(event):
        """X·ª≠ l√Ω ph√≠m s·ªë ƒë·ªÉ ch·ªçn session"""
        try:
            if event.char.isdigit():
                index = int(event.char) - 1
                if 0 <= index < len(sessions):
                    listbox.selection_clear(0, "end")
                    listbox.selection_set(index)
                    listbox.see(index)
            elif event.keysym == "Return":
                on_select()
        except:
            pass
    
    dialog.bind("<Key>", on_key_press)
    dialog.focus_set()
    
    def on_select():
        nonlocal selected_session
        selection = listbox.curselection()
        if selection:
            selected_session = sessions[selection[0]]
            dialog.destroy()
    
    def on_double_click(event):
        on_select()
    
    listbox.bind("<Double-Button-1>", on_double_click)
    
    # Buttons
    button_frame = tk.Frame(dialog)
    button_frame.pack(pady=10)
    
    ok_button = tk.Button(button_frame, text="‚úÖ OK", command=on_select,
                         bg="#4CAF50", fg="white", font=("Segoe UI", 10))
    ok_button.pack(side="left", padx=5)
    
    cancel_button = tk.Button(button_frame, text="‚ùå Cancel", 
                             command=dialog.destroy,
                             bg="#f44336", fg="white", font=("Segoe UI", 10))
    cancel_button.pack(side="left", padx=5)
    
    # Select first item by default
    if sessions:
        listbox.selection_set(0)
        listbox.focus_set()
    
    # Wait for dialog to close
    dialog.wait_window()
    
    return selected_session

if __name__ == "__main__":
    print("üß™ Starting TranscriptResultWindow Test with Real Supabase Data")
    print("This test will use the original UI with real data from your database")
    print("="*70)
    
    test_with_real_data()
